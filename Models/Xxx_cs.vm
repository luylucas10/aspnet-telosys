#parse("include/init_var.vm")
//
// C# class for entity "${entity.name}" 
// Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
// Generated by $generator.name ( version $generator.version )
//
$env.setLanguage('C#')
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Web;
##--------------------------------------------------------------------------------------------------------
## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
## Link fields = fields not in Primary Key and used as FK in selected Links    
#set( $linkFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.IN_SELECTED_LINKS ) )
#set( $string = "string")
##--------------------------------------------------------------------------------------------------------

namespace ${NAMESPACE}.Models
{
	public class ${entity.name}
	{
		//--- KEY ATTRIBUTE 
#foreach( $attribute in $entity.keyAttributes )

		[Key]
#if( $entity.keyAttributesCount > 1 )
		[Column(Order = $foreach.count)]
		public ${attribute.formattedType(0)} ${attribute.formattedName(0)} { get; set; }
#else
#if( ${fn.uncapitalize($attribute.formattedType(0))} == $string)
		[DatabaseGenerated(DatabaseGeneratedOption.None)]
#else
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
#end ## end if
		public ${attribute.formattedType(0)} ${attribute.formattedName(0)} { get; set; }
#end ## end if
#end ## end foreach

		//--- DATA (NOT KEY and NOT LINK) ATTRIBUTES 

#foreach( $attribute in $dataFields )
		public ${attribute.formattedType(0)} ${attribute.formattedName(0)} { get; set; } 
#end

		//--- LINKS ATTRIBUTES 
#foreach ( $attribute in $linkFields )

		[ForeignKey("${attribute.referencedEntityName}")]
		public $attribute.type ${attribute.name} { get; set; }
		public ${attribute.referencedEntityName} ${attribute.referencedEntityName} { get; set; }
#end ##end foreach
#foreach( $link in $entity.selectedLinks )
#if( $link.hasAttributeInPrimaryKey())
#else
#if( ${link.formattedFieldType(0)} == ${link.formattedFieldType(0)})
#if ( $link.fieldType.matches("List.+") )

		public ICollection<${link.targetEntitySimpleType}> ${link.targetEntitySimpleType}s { get; set; }
#end
##
#else
#set($test = "${link.formattedFieldType(0)}s")
#foreach( $attribute in $entity.nonKeyAttributes)
#if( ${attribute.formattedName(0)} ==  $test)
		public ${test}Collection ${attribute.formattedName(0)} { get; set; }
#end ##end if
#end ##end foreach
#end ##end else
#end ##end if
#end ##end foreach
		
		public ${entity.name}()
		{

		}

		public override string ToString()
		{
			return string.Empty #if(${dataFields.size()} == 0) #else + #end #foreach( $attribute in $dataFields ) #if(${dataFields.size()} == $foreach.count) ${attribute.formattedName(0)} #else ${attribute.formattedName(0)} + " " + #end#end;	
		}
	}

##If the entity has a collection type property
#foreach( $link in $entity.selectedLinks )
#if( ${link.formattedFieldType(0)} != ${link.formattedFieldName(0)})
#set($test = "${link.formattedFieldType(0)}s")
#foreach( $attribute in $entity.nonKeyAttributes)
#if( ${attribute.formattedName(0)} ==  $test)
	public class ${test}Collection : List<${link.formattedFieldType(0)}>
	{
		public override string ToString()
		{
			return this.Aggregate(string.Empty, (current, ${fn.uncapitalize($link.formattedFieldType(0))}) => current + ${fn.uncapitalize($link.formattedFieldType(0))}.ToString() + "; "); 
		}
	}
#end ##end if
#end ##end foreach
#end ##end if
#end ##end foreach

}
