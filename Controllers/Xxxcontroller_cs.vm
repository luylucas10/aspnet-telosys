#parse("include/init_var.vm")
//
// C# class for entity "${entity.name}" 
// Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
// Generated by $generator.name ( version $generator.version )
//
$env.setLanguage('C#')
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using ${NAMESPACE}.Models;
using ${NAMESPACE}.ViewModels;
##--------------------------------------------------------------------------------------------------------
## Key fields = fields in Primary Key    
#set( $keyFields = $entity.getAttributesByCriteria( $const.KEY ) )
##--------------------------------------------------------------------------------------------------------
## Link fields = fields not in Primary Key and used as FK in selected Links    
#set( $linkFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
#set( $int = [ "int", "int32", "int64" ] )
#set( $string = "string")
#set( $name = $fn.uncapitalize($entity.name) )
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
#set( $keyFields = $entity.getAttributesByCriteria( $const.KEY ) )
##--------------------------------------------------------------------------------------------------------

namespace ${NAMESPACE}.Controllers
{
	public class ${entity.name}sController : Controller
	{
		private EntitiesDbContext _context { get; set; }		

		public ${entity.name}sController()
		{
			_context = new EntitiesDbContext();
		}

		// GET: ${entity.name}s/List
		[HttpGet]
		public ActionResult List()
		{
			var allElements = _context.${entity.name}s.ToList();
			return View("List${entity.name}View", allElements);
		}
		
		// GET: ${entity.name}s/Create
		[HttpGet]
        public ActionResult Create()
        {
            return View("Create${entity.name}View");
        }

		// POST: ${entity.name}s/Create
		[HttpPost]
		[ValidateAntiForgeryToken]
        public async Task<ActionResult> Create(Create${entity.name}ViewModel model)
        {
			if(ModelState.IsValid)
			{
				var $name = new ${entity.name}();
#foreach( $attribute in $entity.keyAttributes )	  
#if( ${fn.uncapitalize($attribute.formattedType(0))} == $string)
				${name}.${attribute.formattedName(0)} = Guid.NewGuid().ToString();
#end
#end
#foreach( $attribute in $entity.nonKeyAttributes)
				${name}.${attribute.name} = model.${attribute.name};
#end

#foreach( $link in $entity.selectedLinks )
#if( ${link.formattedFieldType(0)} == ${link.formattedFieldName(0)})
				var selected${link.formattedFieldType(0)} = _context.${link.formattedFieldType(0)}s.FirstOrDefault(x => x.${keyFields[0].formattedName(0)} == model.Selected${link.formattedFieldType(0)}Id);
				if(selected${link.formattedFieldType(0)} != null)
				{
					${name}.${link.formattedFieldType(0)} = selected${link.formattedFieldType(0)};
				}
				else
				{
					ModelState.AddModelError("Selected${link.formattedFieldType(0)}Id", "Selected ${link.formattedFieldType(0)} is not valid !");
					return View("Create${entity.name}View", model);
				}
#else
#set($test = "${link.formattedFieldType(0)}s")
#foreach( $attribute in $entity.nonKeyAttributes)
#if( ${attribute.formattedName(0)} ==  $test)
		
				foreach(var x in model.Selected${link.formattedFieldType(0)}sId)
				{
					var current${link.formattedFieldType(0)} = _context.${link.formattedFieldType(0)}s.FirstOrDefault(y => y.${keyFields[0].formattedName(0)} == x);
					
					if(current${link.formattedFieldType(0)} != null)
					{
						${name}.${link.formattedFieldType(0)}s.Add(current${link.formattedFieldType(0)});
					}
					else
					{
						ModelState.AddModelError("Selected${link.formattedFieldType(0)}Id", "Selected ${link.formattedFieldType(0)} is not valid !");
						return View("Create${entity.name}View", model);
					}
				}
#end ##end if
#end ##end foreach
#end ##end else
#end ##end foreach
				
				_context.${entity.name}s.Add(${name});
				await _context.SaveChangesAsync();
				return RedirectToAction("List");
			}

            return View("Create${entity.name}View", model);
        }

#foreach ( $type in $int )
#if( ${fn.uncapitalize(${keyFields[0].formattedType(0)})} == $type )
		// GET: ${entity.name}s/Update/5
#elseif( ${fn.uncapitalize(${keyFields[0].formattedType(0)})} == $string )
		// GET: ${entity.name}s/Update/ea64ed01-9e1b-4c32-83a0-365b4d15eeab
#break
#end ## end if
#end ## end foreach
		[HttpGet]
        public ActionResult Update(${keyFields[0].formattedType(0)} id)
        {

#foreach ( $type in $int )
#if( ${fn.uncapitalize(${keyFields[0].formattedType(0)})} == $string )
			if(!string.IsNullOrEmpty(id) && !string.IsNullOrWhiteSpace(id))
			{
				var $name = _context.${entity.name}s.FirstOrDefault(x => x.${keyFields[0].formattedName(0)} == id);
				if($name != null)
				{
					return View("Update${entity.name}View", new Update${entity.name}ViewModel($name));
				}
			}
#break
#elseif( ${fn.uncapitalize(${keyFields[0].formattedType(0)})} == $type )
			var $name = _context.${entity.name}s.FirstOrDefault(x => x.${keyFields[0].formattedName(0)} == id);
			if($name != null)
			{
				return View("Update${entity.name}View", new Update${entity.name}ViewModel($name));
			}
#break
#end ## end if
#end ## end foreach
		return RedirectToAction("List");
        }

		// POST: ${entity.name}s/Update
		[HttpPost]
		[ValidateAntiForgeryToken]
        public async Task<ActionResult> Update(Update${entity.name}ViewModel model)
        {
			if(ModelState.IsValid)
			{
				var current${entity.name} = _context.${entity.name}s.FirstOrDefault(x => x.${keyFields[0].formattedName(0)} == model.${keyFields[0].formattedName(0)});
				if(current${entity.name} != null)
				{
#foreach( $attribute in $entity.nonKeyAttributes)
					current${entity.name}.${attribute.name} = model.${attribute.name};
#end

#foreach ( $attribute in $keyFields )
					current${entity.name}.${attribute.name} = model.${attribute.name};
#end

					await _context.SaveChangesAsync();
					return RedirectToAction("List");
				}
				else
				{
					ModelState.AddModelError("${keyFields[0].formattedName(0)}", "${keyFields[0].formattedName(0)} is not valid !");
				}	
			}

            return View("Update${entity.name}View", model);
        }

#foreach ( $type in $int )
#if( ${fn.uncapitalize(${keyFields[0].formattedType(0)})} == $type )
		// GET: ${entity.name}s/Delete/5
#elseif( ${fn.uncapitalize(${keyFields[0].formattedType(0)})} == $string )
		// GET: ${entity.name}s/Delete/ea64ed01-9e1b-4c32-83a0-365b4d15eeab
#break
#end ## end if
#end ## end foreach
		[HttpPost]
		[ValidateAntiForgeryToken]
        public async Task<ActionResult> Delete(${keyFields[0].formattedType(0)} ${keyFields[0].formattedName(0)})
        {
#foreach ( $type in $int )
#if( ${fn.uncapitalize(${keyFields[0].formattedType(0)})} == $string )
			if(!string.IsNullOrEmpty(${keyFields[0].formattedName(0)}) && !string.IsNullOrWhiteSpace(${keyFields[0].formattedName(0)}))
			{
				var $name = _context.${entity.name}s.FirstOrDefault(x => x.${keyFields[0].formattedName(0)} == ${keyFields[0].formattedName(0)});
				if($name != null)
				{
## clearing in case of a one to many before removing
#foreach( $link in $entity.selectedLinks )
#if( ${link.formattedFieldType(0)} != ${link.formattedFieldName(0)})
#set($test = "${link.formattedFieldType(0)}s")
#foreach( $attribute in $entity.nonKeyAttributes)
#if( ${attribute.formattedName(0)} ==  $test)
					${name}.${test}.Clear();
#end ##end if
#end ##end foreach
#end ##end if
#end ##end foreach
					_context.${entity.name}s.Remove($name);
					await _context.SaveChangesAsync();
				}
			}
#break
#elseif( ${fn.uncapitalize(${keyFields[0].formattedType(0)})} == $type )
			var $name = _context.${entity.name}s.FirstOrDefault(x => x.${keyFields[0].formattedName(0)} == ${keyFields[0].formattedName(0)});
			if($name != null)
			{
				_context.${entity.name}s.Remove($name);
				await _context.SaveChangesAsync();
			}
#break
#end ## end if
#end ## end foreach
		return RedirectToAction("List");
        }
		
	}
}
